{
  "version": 3,
  "sources": ["../../../../app/routes/jokes/new.tsx"],
  "sourcesContent": ["import type { ActionFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useActionData } from \"@remix-run/react\";\n\nimport { db } from \"~/utils/db.server\";\n\nfunction validateJokeContent(content: string) {\n  if (content.length < 10) {\n    return `That joke is too short`;\n  }\n}\n\nfunction validateJokeName(name: string) {\n  if (name.length < 3) {\n    return `That joke's name is too short`;\n  }\n}\n\ntype ActionData = {\n  formError?: string;\n  fieldErrors?: {\n    name: string | undefined;\n    content: string | undefined;\n  };\n  fields?: {\n    name: string;\n    content: string;\n  };\n};\n\nconst badRequest = (data: ActionData) =>\n  json(data, { status: 400 });\n\nexport const action: ActionFunction = async ({\n  request,\n}) => {\n  const form = await request.formData();\n  const name = form.get(\"name\");\n  const content = form.get(\"content\");\n  // we do this type check to be extra sure and to make TypeScript happy\n  // we'll explore validation next!\n  if (\n    typeof name !== \"string\" ||\n    typeof content !== \"string\"\n  ) {\n    return badRequest({\n      formError: `Form not submitted correctly.`,\n    });\n  }\n\n  const fieldErrors = {\n    name: validateJokeName(name),\n    content: validateJokeContent(content),\n  };\n  const fields = { name, content };\n  if (Object.values(fieldErrors).some(Boolean)) {\n    return badRequest({ fieldErrors, fields });\n  }\n\n  const joke = await db.joke.create({ data: fields });\n  return redirect(`/jokes/${joke.id}`);\n};\n\nconst Index = () => {\n  const actionData = useActionData<ActionData>();\n\n  return (\n    <div>\n      <p>Add your own hilarious joke</p>\n      <form method=\"post\">\n        <div>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              defaultValue={actionData?.fields?.name}\n              name=\"name\"\n              aria-invalid={\n                Boolean(actionData?.fieldErrors?.name) ||\n                undefined\n              }\n              aria-errormessage={\n                actionData?.fieldErrors?.name\n                  ? \"name-error\"\n                  : undefined\n              }\n            />\n          </label>\n          {actionData?.fieldErrors?.name ? (\n            <p\n              className=\"form-validation-error\"\n              role=\"alert\"\n              id=\"name-error\"\n            >\n              {actionData.fieldErrors.name}\n            </p>\n          ) : null}\n        </div>\n\n        <div>\n          <label>\n            Content:\n            <textarea\n              defaultValue={actionData?.fields?.content}\n              name=\"content\"\n              aria-invalid={\n                Boolean(actionData?.fieldErrors?.content) ||\n                undefined\n              }\n              aria-errormessage={\n                actionData?.fieldErrors?.content\n                  ? \"content-error\"\n                  : undefined\n              }\n            />\n          </label>\n          {actionData?.fieldErrors?.content ? (\n            <p\n              className=\"form-validation-error\"\n              role=\"alert\"\n              id=\"content-error\"\n            >\n              {actionData.fieldErrors.content}\n            </p>\n          ) : null}\n        </div>\n        <div>\n          {actionData?.formError ? (\n              <p\n                className=\"form-validation-error\"\n                role=\"alert\"\n              >\n                {actionData.formError}\n              </p>\n            ) : null}\n\n          <button type=\"submit\" className=\"button\">\n            Add\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default Index;"],
  "mappings": ";;;;;;;;;;AAIA,gBAAmB;AAJnB;AA+DA,IAAM,QAAQ,MAAM;AA/DpB;AAgEE,QAAM,aAAa,cAA0B;AAE7C,SACE,mDAAC;AAAA,IACC;AAAA,yDAAC;AAAA,QAAE;AAAA,SAAH;AAAA;AAAA;AAAA;AAAA,aAA8B;AAAA,MAC9B,mDAAC;AAAA,QAAK,QAAO;AAAA,QACX;AAAA,6DAAC;AAAA,YACC;AAAA,iEAAC;AAAA,gBAAM;AAAA;AAAA,kBAEL,mDAAC;AAAA,oBACC,MAAK;AAAA,oBACL,eAAc,8CAAY,WAAZ,mBAAoB;AAAA,oBAClC,MAAK;AAAA,oBACL,gBACE,SAAQ,8CAAY,gBAAZ,mBAAyB,IAAI,KACrC;AAAA,oBAEF,uBACE,8CAAY,gBAAZ,mBAAyB,QACrB,eACA;AAAA,qBAXR;AAAA;AAAA;AAAA;AAAA,yBAaA;AAAA;AAAA,iBAfF;AAAA;AAAA;AAAA;AAAA,qBAgBA;AAAA,gBACC,8CAAY,gBAAZ,mBAAyB,QACxB,mDAAC;AAAA,gBACC,WAAU;AAAA,gBACV,MAAK;AAAA,gBACL,IAAG;AAAA,gBAEF,qBAAW,YAAY;AAAA,iBAL1B;AAAA;AAAA;AAAA;AAAA,qBAMA,IACE;AAAA;AAAA,aA1BN;AAAA;AAAA;AAAA;AAAA,iBA2BA;AAAA,UAEA,mDAAC;AAAA,YACC;AAAA,iEAAC;AAAA,gBAAM;AAAA;AAAA,kBAEL,mDAAC;AAAA,oBACC,eAAc,8CAAY,WAAZ,mBAAoB;AAAA,oBAClC,MAAK;AAAA,oBACL,gBACE,SAAQ,8CAAY,gBAAZ,mBAAyB,OAAO,KACxC;AAAA,oBAEF,uBACE,8CAAY,gBAAZ,mBAAyB,WACrB,kBACA;AAAA,qBAVR;AAAA;AAAA;AAAA;AAAA,yBAYA;AAAA;AAAA,iBAdF;AAAA;AAAA;AAAA;AAAA,qBAeA;AAAA,gBACC,8CAAY,gBAAZ,mBAAyB,WACxB,mDAAC;AAAA,gBACC,WAAU;AAAA,gBACV,MAAK;AAAA,gBACL,IAAG;AAAA,gBAEF,qBAAW,YAAY;AAAA,iBAL1B;AAAA;AAAA;AAAA;AAAA,qBAMA,IACE;AAAA;AAAA,aAzBN;AAAA;AAAA;AAAA;AAAA,iBA0BA;AAAA,UACA,mDAAC;AAAA,YACE;AAAA,wDAAY,aACT,mDAAC;AAAA,gBACC,WAAU;AAAA,gBACV,MAAK;AAAA,gBAEJ,qBAAW;AAAA,iBAJd;AAAA;AAAA;AAAA;AAAA,qBAKA,IACE;AAAA,cAEN,mDAAC;AAAA,gBAAO,MAAK;AAAA,gBAAS,WAAU;AAAA,gBAAS;AAAA,iBAAzC;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA;AAAA,aAZF;AAAA;AAAA;AAAA;AAAA,iBAaA;AAAA;AAAA,SAtEF;AAAA;AAAA;AAAA;AAAA,aAuEA;AAAA;AAAA,KAzEF;AAAA;AAAA;AAAA;AAAA,SA0EA;AAEJ;AAEA,IAAO,cAAQ;",
  "names": []
}
